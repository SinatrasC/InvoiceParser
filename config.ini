##### GENERAL VARIABLES
[GeneralSettings]
	# When true, the converted html will be kept in the same folder as the path. Turn it off if you want to process as temp file.
	keepConvertedHtml = True
	# When true, program will automatically detect current currency and convert it to other alternative and save both amounts in DB.
	# This is a global setting, if you want to turn it on for specific currency, you need to turn off mul_sum in each template section.
	# This option uses api.exchangerate.host to get the rates, if you get a error on currency conversion you might need to check your network.
	autoCurrencyConversion = True
	# When true program will process password protected pdfs accordingly, it will need password provided in this section to use it.
	pdfPasswordSupport = False
	pdfPassword = ""
	# OCR support managed per template, if you want to use it, you need to install tesseract-ocr and set the path to the tesseract executable.
	globalOCRSupport = True
	tesseractPath = C:\Users\User\AppData\Local\Tesseract-OCR\tesseract.exe
	# When true, program will use alternative LAParams to fix parsing issues with some pdfs, only turn on if you have a good reason to do so.
	alternativeLAParams = False
		
# Template identifiers (follow the indexing rule of flags like "flag1 = x\nflag2 = y")
# Template identifiers are used to identify the templates in invoices. Try to compose a unique identifier for each template to prevent conflicts.
[Templates]
	flag1 = Boyner
	flag2 = TurkNet
	flag3 = Vodafone
	flag4 = ADAPOWER
	flag5 = TTNET
	flag6 = sample

# Supported currency types (follow the indexing rule of flags like "flag1 = x\nflag2 = y")
# If you want to add a new currency type, you can add it here as "flag(number) = currency_type"
[Currencies]
	flag1 = TRY
	flag2 = USD
	flag3 = AUD

# Currency identifiers (follow the rule of identifiers like "flag1,flag2")
# If you don't want to use this feature, just leave it empty.
# If you want to use this feature, you have to set the currency identifiers.
# Warning: Be careful about regex matching characters like "." and "$" in the identifiers. Use escape characters like "\." and "\$" instead.
[TRY]
	match = TL, TRY, Lira, â‚º

[USD]
	match = \$, USD

[AUD]
	match = A$

# A example template for TurkNet invoice is given below for reference.
[TurkNet]
##### SECTIONS
# First section until the dynamic index of price css selector
prices_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of price css selector
prices_selector_s2 = ) > span:nth-child(1)

# First section until the dynamic index of package css selector
packages_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of package css selector
packages_selector_s2 = ) > span:nth-child(1)

# CSS Selector of price summary
sum_selector = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# CSS Selector of invoice date
date_selector = body > div:nth-child(4) > span:nth-child(1) > br:nth-child(2)

##### INDEX
# First initial value for dynamic index of price css selector
prices_index = 26

# First initial value for dynamic index of package css selector
packages_index = 8

### Temporary stop conditions for parsing loop
loop_range_start = 8
loop_range_end = 10

##### OPTIONS
# Optional multiple currency summary parsing
mul_sum = True

# CSS Selector of 2nd price summary
sum_selector2 = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# Ocr Support
ocr_support = False

[Boyner]
##### SECTIONS
# First section until the dynamic index of price css selector
prices_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of price css selector
prices_selector_s2 = )

# First section until the dynamic index of package css selector
packages_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of package css selector
packages_selector_s2 = ) > span:nth-child(1)

# CSS Selector of price summary
sum_selector = body > div:nth-child(28) > span:nth-child(1)

# CSS Selector of invoice date
date_selector = body > div:nth-child(8) > span:nth-child(1) > br:nth-child(4)

##### INDEX
# First initial value for dynamic index of price css selector
prices_index = 18

# First initial value for dynamic index of package css selector
packages_index = 11

### Temporary stop conditions for parsing loop
loop_range_start = 11
loop_range_end = 12

##### OPTIONS
# Optional multiple currency summary parsing
mul_sum = False

# CSS Selector of 2nd price summary
sum_selector2 = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# Ocr Support
ocr_support = False

[ADAPOWER]
##### SECTIONS
# First section until the dynamic index of price css selector
prices_selector_s1 = div:nth-child(

# Second section after the dynamic index of price css selector
prices_selector_s2 = ) > span:nth-child(1)

# First section until the dynamic index of package css selector
packages_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of package css selector
packages_selector_s2 = ) > span:nth-child(1)

# CSS Selector of price summary	
sum_selector = body > div:nth-child(32) > span:nth-child(2)

# CSS Selector of invoice date
date_selector = body > div:nth-child(11) > span:nth-child(1) > br:nth-child(4)

##### INDEX
# First initial value for dynamic index of price css selector
prices_index = 26

# First initial value for dynamic index of package css selector
packages_index = 23

### Temporary stop conditions for parsing loop
loop_range_start = 23
loop_range_end = 24

##### OPTIONS
# Optional multiple currency summary parsing
mul_sum = False

# CSS Selector of 2nd price summary
sum_selector2 = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# Ocr Support
ocr_support = False

[TTNET]
##### SECTIONS
# First section until the dynamic index of price css selector
prices_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of price css selector
prices_selector_s2 = ) > span:nth-child(1)

# First section until the dynamic index of package css selector
packages_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of package css selector
packages_selector_s2 = ) > span:nth-child(1)

# CSS Selector of price summary	
sum_selector = body > div:nth-child(43) > span:nth-child(1)

# CSS Selector of invoice date
date_selector = body > div:nth-child(26) > span:nth-child(1)

##### INDEX
# First initial value for dynamic index of price css selector
prices_index = 41

# First initial value for dynamic index of package css selector
packages_index = 29

### Temporary stop conditions for parsing loop
loop_range_start = 29
loop_range_end = 30

##### OPTIONS
# Optional multiple currency summary parsing
mul_sum = False

# CSS Selector of 2nd price summary
sum_selector2 = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# Ocr Support
ocr_support = False

[Vodafone]
##### SECTIONS
# First section until the dynamic index of price css selector
prices_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of price css selector
prices_selector_s2 = ) > span:nth-child(1)

body > div:nth-child(13) > span:nth-child(1)

# First section until the dynamic index of package css selector
packages_selector_s1 = body > div:nth-child(

# Second section after the dynamic index of package css selector
packages_selector_s2 = ) > span:nth-child(1)

# CSS Selector of price summary
sum_selector = body > div:nth-child(12) > span:nth-child(2)

# CSS Selector of invoice date
date_selector = body > div:nth-child(11) > span:nth-child(2)

##### INDEX
# First initial value for dynamic index of price css selector
prices_index = 45

# First initial value for dynamic index of package css selector
packages_index = 27

### Temporary stop conditions for parsing loop
loop_range_start = 27
loop_range_end = 28

##### OPTIONS
# Optional multiple currency summary parsing
mul_sum = False

# CSS Selector of 2nd price summary
sum_selector2 = body > div:nth-child(23) > span:nth-child(1) > br:nth-child(1)

# Ocr Support
ocr_support = True